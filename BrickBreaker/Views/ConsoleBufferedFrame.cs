using BrickBreaker.Views;
using System;
using System.Collections.Generic;
using System.Text;

namespace BrickBreaker.Classes
{

    /// <summary>
    /// An attempt to make a refreshable screen buffer object to display things on the console.
    /// </summary>
    public class ConsoleBufferedFrame
    {
        public int Width { get; }
        public int Height { get; }

        private string[,] buffer;//multidimensional arrays! cool, but they are accessed like y,x and not x,y. the game gets flipped 90 degrees sometimes with bugs

        public ConsoleBufferedFrame(int width, int height)
        {
            this.Width = width;
            this.Height = height;
            this.buffer = new string[height, width];
            this.clear();

        }

        /// <summary>
        /// Resets this buffer to be empty.
        /// </summary>
        public void clear()
        {
            for (int currYIndex = 0; currYIndex < this.Height; currYIndex++)
            {

                for (int currXIndex = 0; currXIndex < this.Width; currXIndex++)
                {
                    this.buffer[currYIndex, currXIndex] = " ";
                }
            }
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            for (int currYIndex = 0; currYIndex < this.Height ; currYIndex++)
            {

                for (int currXIndex = 0; currXIndex < this.Width ; currXIndex++)
                {
                    sb.Append(this.buffer[currYIndex, currXIndex]);
                }
                sb.Append("\n");
            }
            return sb.ToString();
        }

        /// <summary>
        /// Adds an entity's AsciiSprite to this BufferedFrame
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <autogeneratedoc />
        /// TODO Edit XML Comment Template for AddEntity
        public void AddEntity(Entity entity)
        {
            /*first calculate the centering offsets. 
            These coords represent the upper-left 
            corner of where to start drawing the entity*/
            int XPosOffset = (int)Math.Round(entity.XPos - (entity.Width / 2));
            int YPosOffset = (int)Math.Round(entity.YPos - (entity.Height / 2));
            for (int yIndex = 0; yIndex < entity.Height; yIndex++)
            {
                for (int xIndex = 0; xIndex < entity.Width; xIndex++)
                {
                    this.buffer[YPosOffset + yIndex, XPosOffset + xIndex] = entity.AsciiSprite[yIndex, xIndex];
                }
            }
        }



    }

}


